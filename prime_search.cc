#include <iostream>
#include <string>
#include <gmp.h>
#include <random>
#include <algorithm>

char get_tweaked_char(char c) {
	switch(c) {
		case '0' : return '8'; break;
		case '1' : return '7'; break;
		case '2' : return '5'; break;
		case '3' : return '4'; break;
		case '4' : return '3'; break;
		case '5' : return '2'; break;
		case '6' : return '9'; break;
		case '7' : return '1'; break;
		case '8' : return '0'; break;
		case '9' : return '6'; break;
	}
}

void tweak_string(std::string &s, int i) {
	s[i] = get_tweaked_char(s[i]);
}

int miller_rabin(std::string img, int reps) {
	mpz_t n;
	mpz_init(n);
	mpz_set_str(n, img.c_str(), 10); // read from string as base 10
	return mpz_probab_prime_p(n, reps);
}

int comb(std::string& img, int K) {
	int N = img.length();
    std::string bitmask(K, 1); // K leading 1's
    bitmask.resize(N, 0); // N-K trailing 0's

    // print integers and permute bitmask
    do {
		std::string mod_img(img);
        for (int i = 0; i < N; ++i) {// [0..N-1] integers
            if (bitmask[i]) tweak_string(mod_img, i);
        }
		int res = miller_rabin(mod_img, 8);
		if (res != 0) {
			swap(mod_img, img);
			return res;
		}
    } while (std::prev_permutation(bitmask.begin(), bitmask.end()));
	return 0;
}

std::string find_candidate(std::string& img) {
	for(int i = 0; i<img.length(); i++) {
		if (comb(img, i) != 0) break;
	}
	std::cout << "candidate found!" << std::endl;
	std::cout << img << std::endl;
}

int main() {
	// Corpus Christi Prime test placeholder
	std::string img
	find_candidate(img);

}
